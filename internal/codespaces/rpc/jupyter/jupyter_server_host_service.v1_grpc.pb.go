// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: jupyter/jupyter_server_host_service.v1.proto

package jupyter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JupyterServerHostClient is the client API for JupyterServerHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JupyterServerHostClient interface {
	GetRunningServer(ctx context.Context, in *GetRunningServerRequest, opts ...grpc.CallOption) (*GetRunningServerResponse, error)
}

type jupyterServerHostClient struct {
	cc grpc.ClientConnInterface
}

func NewJupyterServerHostClient(cc grpc.ClientConnInterface) JupyterServerHostClient {
	return &jupyterServerHostClient{cc}
}

func (c *jupyterServerHostClient) GetRunningServer(ctx context.Context, in *GetRunningServerRequest, opts ...grpc.CallOption) (*GetRunningServerResponse, error) {
	out := new(GetRunningServerResponse)
	err := c.cc.Invoke(ctx, "/Codespaces.Grpc.JupyterServerHostService.v1.JupyterServerHost/GetRunningServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JupyterServerHostServer is the server API for JupyterServerHost service.
// All implementations must embed UnimplementedJupyterServerHostServer
// for forward compatibility
type JupyterServerHostServer interface {
	GetRunningServer(context.Context, *GetRunningServerRequest) (*GetRunningServerResponse, error)
	mustEmbedUnimplementedJupyterServerHostServer()
}

// UnimplementedJupyterServerHostServer must be embedded to have forward compatible implementations.
type UnimplementedJupyterServerHostServer struct {
}

func (UnimplementedJupyterServerHostServer) GetRunningServer(context.Context, *GetRunningServerRequest) (*GetRunningServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningServer not implemented")
}
func (UnimplementedJupyterServerHostServer) mustEmbedUnimplementedJupyterServerHostServer() {}

// UnsafeJupyterServerHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JupyterServerHostServer will
// result in compilation errors.
type UnsafeJupyterServerHostServer interface {
	mustEmbedUnimplementedJupyterServerHostServer()
}

func RegisterJupyterServerHostServer(s grpc.ServiceRegistrar, srv JupyterServerHostServer) {
	s.RegisterService(&JupyterServerHost_ServiceDesc, srv)
}

func _JupyterServerHost_GetRunningServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunningServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JupyterServerHostServer).GetRunningServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Codespaces.Grpc.JupyterServerHostService.v1.JupyterServerHost/GetRunningServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JupyterServerHostServer).GetRunningServer(ctx, req.(*GetRunningServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JupyterServerHost_ServiceDesc is the grpc.ServiceDesc for JupyterServerHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JupyterServerHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Codespaces.Grpc.JupyterServerHostService.v1.JupyterServerHost",
	HandlerType: (*JupyterServerHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRunningServer",
			Handler:    _JupyterServerHost_GetRunningServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jupyter/jupyter_server_host_service.v1.proto",
}
