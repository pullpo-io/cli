// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: ssh/ssh_server_host_service.v1.proto

package ssh

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SshServerHostClient is the client API for SshServerHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SshServerHostClient interface {
	StartRemoteServerAsync(ctx context.Context, in *StartRemoteServerRequest, opts ...grpc.CallOption) (*StartRemoteServerResponse, error)
}

type sshServerHostClient struct {
	cc grpc.ClientConnInterface
}

func NewSshServerHostClient(cc grpc.ClientConnInterface) SshServerHostClient {
	return &sshServerHostClient{cc}
}

func (c *sshServerHostClient) StartRemoteServerAsync(ctx context.Context, in *StartRemoteServerRequest, opts ...grpc.CallOption) (*StartRemoteServerResponse, error) {
	out := new(StartRemoteServerResponse)
	err := c.cc.Invoke(ctx, "/Codespaces.Grpc.SshServerHostService.v1.SshServerHost/StartRemoteServerAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SshServerHostServer is the server API for SshServerHost service.
// All implementations must embed UnimplementedSshServerHostServer
// for forward compatibility
type SshServerHostServer interface {
	StartRemoteServerAsync(context.Context, *StartRemoteServerRequest) (*StartRemoteServerResponse, error)
	mustEmbedUnimplementedSshServerHostServer()
}

// UnimplementedSshServerHostServer must be embedded to have forward compatible implementations.
type UnimplementedSshServerHostServer struct {
}

func (UnimplementedSshServerHostServer) StartRemoteServerAsync(context.Context, *StartRemoteServerRequest) (*StartRemoteServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRemoteServerAsync not implemented")
}
func (UnimplementedSshServerHostServer) mustEmbedUnimplementedSshServerHostServer() {}

// UnsafeSshServerHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SshServerHostServer will
// result in compilation errors.
type UnsafeSshServerHostServer interface {
	mustEmbedUnimplementedSshServerHostServer()
}

func RegisterSshServerHostServer(s grpc.ServiceRegistrar, srv SshServerHostServer) {
	s.RegisterService(&SshServerHost_ServiceDesc, srv)
}

func _SshServerHost_StartRemoteServerAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRemoteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshServerHostServer).StartRemoteServerAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Codespaces.Grpc.SshServerHostService.v1.SshServerHost/StartRemoteServerAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshServerHostServer).StartRemoteServerAsync(ctx, req.(*StartRemoteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SshServerHost_ServiceDesc is the grpc.ServiceDesc for SshServerHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SshServerHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Codespaces.Grpc.SshServerHostService.v1.SshServerHost",
	HandlerType: (*SshServerHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRemoteServerAsync",
			Handler:    _SshServerHost_StartRemoteServerAsync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssh/ssh_server_host_service.v1.proto",
}
